/**
var jq = document.createElement('script');
jq.src = "https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js";
document.getElementsByTagName('head')[0].appendChild(jq);
**/


var symbols = [["PCJEWELLER",7455745,100.65,126.8, 94.55, 121.45],["TCS",2953217,3509.8,3526, 3470.4, 3481.85],["YESBANK",3050241,354,359.25, 346.5, 353.95],["AXISBANK",1510401,522,538.8, 522, 533.4],["RELIANCE",738561,977.9,977.9, 959.25, 961.6]];
var typeOfOrder='LIMIT';var varietyType='regular';var invest=0, qty=1;var entryPercFromOpen=parseFloat(0.05);
var hour=11, minute=52, second=1;var gapCutoff=parseFloat(9);var getOnPrevHighLowCompare1=parseFloat(0.9);var gapWithCloseTest1=parseFloat(3.2);var getOnPrevCloseCompare1=parseFloat(2), getOnPrevCloseCompare2=parseFloat(-5);var getData1=parseFloat(1.4);var min=parseFloat(20), max=parseFloat(5000);var csrfToken='njS9ZQuKs23YvXN3utmWMJol1UYlz8ku';var accessToken='QUzrLz9ynMVVlPQUCLCHt6nceKt6SNjk';





var entryTradeObjects = [], exitTradeObjects = [], orderIds=[];
var eligibleSymbols = [];
var now = new Date();
var millisTill10 = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hour, minute, second, 0) - now;
if (millisTill10 < 0) {
    millisTill10 += 86400000; 
	console.log("it's already after 9:15");
}
setTimeout(start, millisTill10);


function collectEligibleSymbol(company, direction, zerodhaId){
	var eligibleSym = {
		Id: company,
		Direction: direction,
		ZerodhaId: zerodhaId
	}
	return eligibleSym;
}
function generateOrderObject(company, limitPrice, transaction_type, order_type, variety)
{
	if(order_type=='MARKET'){
		limitPrice=0;
	}
	var order = {
		Id:"",
		TransactionType:"",
		OrderType:"",
		Quantity:"",
		LimitPrice:"",
		TriggerPrice:"",
		Variety:""
	};
	//clearOrder();
	order.Id=company;
	order.TransactionType= transaction_type;
	order.OrderType=order_type;
	order.Quantity=qty;
	order.LimitPrice=limitPrice;// in placeOrder req, for MARKET : 0, LIMIT: limitPrice
	order.TriggerPrice = 0;
	order.Variety=variety;
	return order;
}

//getOnPrevHighLowCompare
function getOnPrevHighLowCompare(name, zerodhaId, openPrice, yestOpen, yestHigh, yestLow, yestClose, min, max){
	if((openPrice-yestHigh)*100/yestHigh > getOnPrevHighLowCompare1 && (openPrice-yestClose)*100/yestClose < gapCutoff && openPrice < max && openPrice>min && yestOpen!=yestClose){
		eligibleSymbols[eligibleSymbols.length] = collectEligibleSymbol(name, "SELL", zerodhaId);
	}
	else if((yestLow-openPrice)*100/openPrice > getOnPrevHighLowCompare1 && (yestClose-openPrice)*100/openPrice < gapCutoff && openPrice < max &&  openPrice>min && yestOpen!=yestClose){
		eligibleSymbols[eligibleSymbols.length] = collectEligibleSymbol(name, "BUY", zerodhaId);
	}
}
//gapWithCloseTest
function gapWithCloseTest(name, zerodhaId, openPrice, yestOpen, yestHigh, yestLow, yestClose, min, max){
	if((openPrice-yestClose)*100/yestClose > gapWithCloseTest1 && (openPrice-yestClose)*100/yestClose < gapCutoff && openPrice < max && 		openPrice>min && yestClose!=yestOpen){
		eligibleSymbols[eligibleSymbols.length] = collectEligibleSymbol(name, "SELL", zerodhaId);
	}
	else if((yestClose-openPrice)*100/openPrice > gapWithCloseTest1 && (yestClose-openPrice)*100/openPrice < gapCutoff && openPrice < max &&  openPrice>min && yestClose!=yestOpen){
		eligibleSymbols[eligibleSymbols.length] = collectEligibleSymbol(name, "BUY", zerodhaId);
	}
}

//getOnPrevCloseCompare
function getOnPrevCloseCompare(name, zerodhaId, openPrice, yestOpen, yestHigh, yestLow, yestClose, min, max){
	if((openPrice-yestClose)*100/yestClose > getOnPrevCloseCompare1 && (openPrice-yestClose)*100/yestClose < gapCutoff && openPrice < max && openPrice>min && (yestOpen-yestClose)*100/yestClose > getOnPrevCloseCompare2 && yestOpen!=yestClose){
		eligibleSymbols[eligibleSymbols.length] = collectEligibleSymbol(name, "SELL", zerodhaId);
	}
	else if((yestClose-openPrice)*100/openPrice > getOnPrevCloseCompare1 && (yestClose-openPrice)*100/openPrice < gapCutoff && openPrice < max &&  openPrice>min && (yestClose-yestOpen)*100/yestOpen > getOnPrevCloseCompare2 && yestOpen!=yestClose){
		eligibleSymbols[eligibleSymbols.length] = collectEligibleSymbol(name, "BUY", zerodhaId);
	}
}

//getData
function getData(name, zerodhaId, openPrice, yestOpen, yestHigh, yestLow, yestClose, min, max){
	if((openPrice-yestClose)*100/yestClose > getData1 && (openPrice-yestClose)*100/yestClose < gapCutoff && openPrice < max && openPrice>min && yestOpen!=yestClose){
		var fib = yestHigh- (yestHigh-yestLow)/2;
		if(openPrice > fib){
			eligibleSymbols[eligibleSymbols.length] = collectEligibleSymbol(name, "SELL", zerodhaId);
		}
	}
	else if((yestClose-openPrice)*100/openPrice > getData1 && (yestClose-openPrice)*100/openPrice < gapCutoff && openPrice < max && openPrice>min && yestOpen!=yestClose){
		var fib = yestLow+ (yestHigh-yestLow)/2;
		if(openPrice < fib){
			eligibleSymbols[eligibleSymbols.length] = collectEligibleSymbol(name, "BUY", zerodhaId);
		}
	}
}

function getEligibleSymbols(){
	console.log(new Date());
	var name, zerodhaId, yestOpen, yestHigh, yestLow, yestClose, fileNo=0;
	var whatPrice = 'O', whichCandle='1', duration = "";
	var size = Math.floor(symbols.length/1);
	var start = fileNo*size; var end = start+size;
	for(var i=start; i< end; i++){
		name=symbols[i][0]; zerodhaId=symbols[i][1]; yestOpen=parseFloat(symbols[i][2]); yestHigh=parseFloat(symbols[i][3]);
		yestLow=parseFloat(symbols[i][4]);yestClose=parseFloat(symbols[i][5]);
		openPrice = parseFloat(getPriceFromZerodha(zerodhaId, duration, whatPrice, whichCandle));
		
		getOnPrevHighLowCompare(name, zerodhaId, openPrice, yestOpen, yestHigh, yestLow, yestClose, min, max)
		gapWithCloseTest(name, zerodhaId, openPrice, yestOpen, yestHigh, yestLow, yestClose, min, max)
		getOnPrevCloseCompare(name, zerodhaId, openPrice, yestOpen, yestHigh, yestLow, yestClose, min, max)
		getData(name, zerodhaId, openPrice, yestOpen, yestHigh, yestLow, yestClose, min, max)
	}
	console.log(new Date());
}

function populateTradeObjects(){
	console.log(new Date());
	var name, zerodhaId, yestOpen, yestHigh, yestLow, yestClose;
	var whatPrice = 'C', whichCandle='1', duration = 3;
	for(var i=0; i< eligibleSymbols.length; i++){
	name = eligibleSymbols[i].Id; direction = eligibleSymbols[i].Direction; zerodhaId = eligibleSymbols[i].ZerodhaId;
		price = parseFloat(getPriceFromZerodha(zerodhaId, duration, whatPrice, whichCandle));
		if(direction=='SELL')
		{
			entryPrice = price - (price*entryPercFromOpen)/100;
			entryPrice = getTickPrice(entryPrice);
			entryTradeObjects[entryTradeObjects.length] = generateOrderObject(name, entryPrice, "SELL", typeOfOrder, varietyType);
		}
		else if(direction =='BULL'){
			entryPrice = price + (price*entryPercFromOpen)/100;
			entryPrice = getTickPrice(entryPrice);
			entryTradeObjects[entryTradeObjects.length] = generateOrderObject(name, entryPrice, "BUY", typeOfOrder, varietyType);
		}
	}
	
	var amntToInvestPerSymbol = invest/entryTradeObjects.length;
	console.log(entryTradeObjects);
	for (var i=0; i<entryTradeObjects.length; i++)
	{
		orderId = PlaceOrder(entryTradeObjects[i], amntToInvestPerSymbol, "regular");
		if(orderId!=""){
			orderIds[orderIds.length]=executedOrders(orderId, entryTradeObjects[i].Id);
		}else {
			exitTradeObjects.splice(i,1);
		}
	}
}

function start(){
	invest = parseFloat(getCashInAccount());
	
	getEligibleSymbols();
	if(eligibleSymbols.length>0){
		console.log(eligibleSymbols);
		now = new Date();
		millisTill10 = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hour, parseInt(minute)+3, second, 0) - now;
		if (millisTill10 < 0) {
			millisTill10 += 86400000; 
			console.log("it's already after 9:18");
		}
		setTimeout(populateTradeObjects, millisTill10);
	}
}

function executedOrders(orderId, symbol){
	var executedOrders = {
		OrderId:"",
		Symbol:"",
		Status: ""
	};
	executedOrders.OrderId=orderId;
	executedOrders.Symbol=symbol;
	executedOrders.Status="";
	return executedOrders;
}

function PlaceOrder(Order, amntToInvestPerSymbol, variety)
{ 
	var order_id="";
    $.ajaxSettings.beforeSend=function(xhr){
        xhr.setRequestHeader('Accept', "application/json, text/plain, */*");
        xhr.setRequestHeader('Content-Type', "application/x-www-form-urlencoded");
		xhr.setRequestHeader('x-csrftoken', csrfToken);
		xhr.setRequestHeader('x-kite-version', '1.2.0');
    };
	noOfShares = amntToInvestPerSymbol/Order.LimitPrice;
	Order.Quantity = parseInt(noOfShares);
	var OrderData = "exchange=NSE&tradingsymbol="+Order.Id+"&transaction_type="+Order.TransactionType+"&order_type="+Order.OrderType+"&quantity="+Order.Quantity+"&price="+Order.LimitPrice+"&product=MIS&validity=DAY&disclosed_quantity=0&trigger_price="+Order.TriggerPrice+"&squareoff=0&stoploss=0&trailing_stoploss=0&variety="+variety+"";

	$.ajax({
	statusCode: {
	 500: function() {
	console.error("Error while placing order.");
	  }
	},
	url : "https://kite.zerodha.com/api/orders/"+varietyType,
	type: "POST",
	async: false,
	data : OrderData,
	success: function(data, textStatus, jqXHR)
	{
		console.log(Order.Id);
		if(data != null && data.status == "success")
			order_id =  data.data.order_id;
	},
	error: function (jqXHR, textStatus, errorThrown)
	{
		console.log("error");
	}
	});
	if(order_id=="") sleep(10);
	return order_id;
}

function getO_H_L_C(data, whatPrice, whichCandle)
{
	var index;
	if(whatPrice=='O') index = 1
	else if(whatPrice=='H') index = 2
	else if(whatPrice=='L') index = 3
	else if(whatPrice=='C') index = 4;
	var price=-999;
	if(data.data.candles.length!=0 && data.data.candles.length>=whichCandle){
		price = data.data.candles[whichCandle][index];
	}
	return price;
}

function getPriceFromZerodha(token, duration, whatPrice, whichCandle)
{
	var result="";
	var from=getDate(0), to =getDate(0);
	var getUrl = "https://kitecharts.zerodha.com/api/chart/"+token+"/"+duration+"minute?public_token="+csrfToken+"&user_id=DP3137&api_key=kitefront&access_token="+accessToken+"&from="+from+"&to="+to+"&ciqrandom=1523897795455";
	
	var xhr = new XMLHttpRequest();
	xhr.open("GET", getUrl, false);
	xhr.send();
	result = getO_H_L_C(JSON.parse(xhr.response), whatPrice, whichCandle);
	return result;
}

//get margin from zerodha
function getCashInAccount()
{
	var result="";
	var getUrl = "https://kite.zerodha.com/api/user/margins";
	
	var xhr = new XMLHttpRequest();
	xhr.open("GET", getUrl, false);
	xhr.setRequestHeader("x-csrftoken", csrfToken);
	xhr.setRequestHeader("x-kite-version", "1.2.0");
	xhr.send();
	result = JSON.parse(xhr.response).data.equity.available.cash;
	return result;
}

//Utility functions------------------------------------------------------------------------------
function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
}

function getDate(dayToSubstract) {
    var date = new Date();
    date.setDate(date.getDate()-dayToSubstract);
    return date.getFullYear() + '-' + ('0' + (date.getMonth()+1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);
}

function getTickPrice(price){
	var tickPrice = 0;
	toAdd = 10-(((parseFloat(price).toFixed(2))*100)%10);
	if(parseInt(toAdd) < 5){
		tickPrice = (((parseFloat(price).toFixed(2))*100)+toAdd)/100;
	}
	if(parseInt(toAdd) >= 5){
		tickPrice = (((parseFloat(price).toFixed(2))*100)+(toAdd-5))/100;
	}
	return tickPrice;
}
 